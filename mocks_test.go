// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package main

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewMockEsaClientInterface creates a new instance of MockEsaClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEsaClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEsaClientInterface {
	mock := &MockEsaClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEsaClientInterface is an autogenerated mock type for the EsaClientInterface type
type MockEsaClientInterface struct {
	mock.Mock
}

type MockEsaClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEsaClientInterface) EXPECT() *MockEsaClientInterface_Expecter {
	return &MockEsaClientInterface_Expecter{mock: &_m.Mock}
}

// CreatePost provides a mock function for the type MockEsaClientInterface
func (_mock *MockEsaClientInterface) CreatePost(text string) (*EsaPost, error) {
	ret := _mock.Called(text)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 *EsaPost
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*EsaPost, error)); ok {
		return returnFunc(text)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *EsaPost); ok {
		r0 = returnFunc(text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EsaPost)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(text)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEsaClientInterface_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type MockEsaClientInterface_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - text
func (_e *MockEsaClientInterface_Expecter) CreatePost(text interface{}) *MockEsaClientInterface_CreatePost_Call {
	return &MockEsaClientInterface_CreatePost_Call{Call: _e.mock.On("CreatePost", text)}
}

func (_c *MockEsaClientInterface_CreatePost_Call) Run(run func(text string)) *MockEsaClientInterface_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEsaClientInterface_CreatePost_Call) Return(esaPost *EsaPost, err error) *MockEsaClientInterface_CreatePost_Call {
	_c.Call.Return(esaPost, err)
	return _c
}

func (_c *MockEsaClientInterface_CreatePost_Call) RunAndReturn(run func(text string) (*EsaPost, error)) *MockEsaClientInterface_CreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// SearchPostByCategory provides a mock function for the type MockEsaClientInterface
func (_mock *MockEsaClientInterface) SearchPostByCategory(category string) (*EsaPost, error) {
	ret := _mock.Called(category)

	if len(ret) == 0 {
		panic("no return value specified for SearchPostByCategory")
	}

	var r0 *EsaPost
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*EsaPost, error)); ok {
		return returnFunc(category)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *EsaPost); ok {
		r0 = returnFunc(category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EsaPost)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(category)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEsaClientInterface_SearchPostByCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchPostByCategory'
type MockEsaClientInterface_SearchPostByCategory_Call struct {
	*mock.Call
}

// SearchPostByCategory is a helper method to define mock.On call
//   - category
func (_e *MockEsaClientInterface_Expecter) SearchPostByCategory(category interface{}) *MockEsaClientInterface_SearchPostByCategory_Call {
	return &MockEsaClientInterface_SearchPostByCategory_Call{Call: _e.mock.On("SearchPostByCategory", category)}
}

func (_c *MockEsaClientInterface_SearchPostByCategory_Call) Run(run func(category string)) *MockEsaClientInterface_SearchPostByCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEsaClientInterface_SearchPostByCategory_Call) Return(esaPost *EsaPost, err error) *MockEsaClientInterface_SearchPostByCategory_Call {
	_c.Call.Return(esaPost, err)
	return _c
}

func (_c *MockEsaClientInterface_SearchPostByCategory_Call) RunAndReturn(run func(category string) (*EsaPost, error)) *MockEsaClientInterface_SearchPostByCategory_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePost provides a mock function for the type MockEsaClientInterface
func (_mock *MockEsaClientInterface) UpdatePost(existingPost *EsaPost, text string) (*EsaPost, error) {
	ret := _mock.Called(existingPost, text)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 *EsaPost
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*EsaPost, string) (*EsaPost, error)); ok {
		return returnFunc(existingPost, text)
	}
	if returnFunc, ok := ret.Get(0).(func(*EsaPost, string) *EsaPost); ok {
		r0 = returnFunc(existingPost, text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EsaPost)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*EsaPost, string) error); ok {
		r1 = returnFunc(existingPost, text)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Search provides a mock function for the type MockEsaClientInterface
func (_mock *MockEsaClientInterface) Search(options ...SearchOption) (*EsaSearchResult, error) {
	ret := _mock.Called(options)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 *EsaSearchResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(...SearchOption) (*EsaSearchResult, error)); ok {
		return returnFunc(options...)
	}
	if returnFunc, ok := ret.Get(0).(func(...SearchOption) *EsaSearchResult); ok {
		r0 = returnFunc(options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EsaSearchResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(...SearchOption) error); ok {
		r1 = returnFunc(options...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEsaClientInterface_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockEsaClientInterface_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - options
func (_e *MockEsaClientInterface_Expecter) Search(options interface{}) *MockEsaClientInterface_Search_Call {
	return &MockEsaClientInterface_Search_Call{Call: _e.mock.On("Search", options)}
}

func (_c *MockEsaClientInterface_Search_Call) Run(run func(options ...SearchOption)) *MockEsaClientInterface_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]SearchOption)...)
	})
	return _c
}

func (_c *MockEsaClientInterface_Search_Call) Return(result *EsaSearchResult, err error) *MockEsaClientInterface_Search_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockEsaClientInterface_Search_Call) RunAndReturn(run func(...SearchOption) (*EsaSearchResult, error)) *MockEsaClientInterface_Search_Call {
	_c.Call.Return(run)
	return _c
}

// MockEsaClientInterface_UpdatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePost'
type MockEsaClientInterface_UpdatePost_Call struct {
	*mock.Call
}

// UpdatePost is a helper method to define mock.On call
//   - existingPost
//   - text
func (_e *MockEsaClientInterface_Expecter) UpdatePost(existingPost interface{}, text interface{}) *MockEsaClientInterface_UpdatePost_Call {
	return &MockEsaClientInterface_UpdatePost_Call{Call: _e.mock.On("UpdatePost", existingPost, text)}
}

func (_c *MockEsaClientInterface_UpdatePost_Call) Run(run func(existingPost *EsaPost, text string)) *MockEsaClientInterface_UpdatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*EsaPost), args[1].(string))
	})
	return _c
}

func (_c *MockEsaClientInterface_UpdatePost_Call) Return(esaPost *EsaPost, err error) *MockEsaClientInterface_UpdatePost_Call {
	_c.Call.Return(esaPost, err)
	return _c
}

func (_c *MockEsaClientInterface_UpdatePost_Call) RunAndReturn(run func(existingPost *EsaPost, text string) (*EsaPost, error)) *MockEsaClientInterface_UpdatePost_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHTTPClientInterface creates a new instance of MockHTTPClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHTTPClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHTTPClientInterface {
	mock := &MockHTTPClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHTTPClientInterface is an autogenerated mock type for the HTTPClientInterface type
type MockHTTPClientInterface struct {
	mock.Mock
}

type MockHTTPClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHTTPClientInterface) EXPECT() *MockHTTPClientInterface_Expecter {
	return &MockHTTPClientInterface_Expecter{mock: &_m.Mock}
}

// Do provides a mock function for the type MockHTTPClientInterface
func (_mock *MockHTTPClientInterface) Do(req *http.Request) (*http.Response, error) {
	ret := _mock.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*http.Request) (*http.Response, error)); ok {
		return returnFunc(req)
	}
	if returnFunc, ok := ret.Get(0).(func(*http.Request) *http.Response); ok {
		r0 = returnFunc(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = returnFunc(req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHTTPClientInterface_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockHTTPClientInterface_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - req
func (_e *MockHTTPClientInterface_Expecter) Do(req interface{}) *MockHTTPClientInterface_Do_Call {
	return &MockHTTPClientInterface_Do_Call{Call: _e.mock.On("Do", req)}
}

func (_c *MockHTTPClientInterface_Do_Call) Run(run func(req *http.Request)) *MockHTTPClientInterface_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockHTTPClientInterface_Do_Call) Return(response *http.Response, err error) *MockHTTPClientInterface_Do_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockHTTPClientInterface_Do_Call) RunAndReturn(run func(req *http.Request) (*http.Response, error)) *MockHTTPClientInterface_Do_Call {
	_c.Call.Return(run)
	return _c
}
